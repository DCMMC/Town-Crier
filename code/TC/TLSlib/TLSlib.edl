enclave {
	include "mbedtls/net_v.h"
	include "mbedtls/timing_v.h"
	// include "../TLSlibSupport/print.h"

	trusted {
	};

	untrusted {
		// net.h
		int ocall_mbedtls_net_connect([in, out] mbedtls_net_context *ctx, [in,string] const char *host, [in,string] const char *port, int proto );
		int ocall_mbedtls_net_bind( [in, out] mbedtls_net_context *ctx, [in] const char *bind_ip, [in] const char *port, int proto );
		// int ocall_mbedtls_net_accept( [in, out] mbedtls_net_context *bind_ctx, [in,out] mbedtls_net_context *client_ctx, [in, size=len] void *client_ip, size_t buf_size, [out] size_t *ip_len );
		int ocall_mbedtls_net_set_block([in,out] mbedtls_net_context *ctx );
		int ocall_mbedtls_net_set_nonblock( [in,out] mbedtls_net_context *ctx );
		void ocall_mbedtls_net_usleep( unsigned long usec );
		int ocall_mbedtls_net_recv( [in,out] mbedtls_net_context *ctx, [out, size=len] unsigned char *buf, size_t len );
		int ocall_mbedtls_net_send( [in,out] mbedtls_net_context *ctx, [in, size=len] const unsigned char *buf, size_t len );
		int ocall_mbedtls_net_recv_timeout( [in,out] mbedtls_net_context *ctx, [out, size=len] unsigned char *buf, size_t len, uint32_t timeout );
		void ocall_mbedtls_net_free( [in, out] mbedtls_net_context *ctx );

		// entropy
		// int ocall_mbedtls_hardware_poll([out,size=len] unsigned char *output, size_t len, [in,out] size_t *olen );

		// printf
		int ocall_print_string([in, string] const char *str);
	};
};
