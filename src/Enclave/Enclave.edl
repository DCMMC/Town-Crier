enclave {
    from "mbedtls-SGX/lib/mbedtls_sgx.edl" import *;
    from "EnclaveTest.edl" import *;
    
    include "sgx_report.h"
    include "time.h"
    include "stddef.h"
    include "sgx_tseal.h"

    trusted {
        public int handle_request(
                   int nonce,
                   uint64_t id, uint64_t type,
                   [user_check] uint8_t* data, size_t data_len,
                   [user_check] uint8_t* tx, [out] size_t* len);

        public int ecall_create_report ([in] sgx_target_info_t* quote_enc_info, [out] sgx_report_t* report);

        public int ecall_time_calibrate (time_t wall_clock, [out] uint8_t wtc_rsv[65]);

        public int register_exception_handlers();
        public int ecdsa_keygen_seal(
                    [user_check] unsigned char *o_sealed,
                    [in,out] size_t *olen,
                    [user_check] unsigned char *o_pubkey,
                    [user_check] unsigned char *o_address);

        public int ecdsa_keygen_unseal(
                    [in,size=secret_len] const sgx_sealed_data_t *secret,
                    size_t secret_len,
                    [user_check] unsigned char* pubkey,
                    [user_check] unsigned char *address);

        public int tc_provision_key(
                    [in,size=secret_len] const sgx_sealed_data_t *secret,
                    size_t secret_len);

        public int tc_get_address(
                    [user_check] unsigned char* pubkey,
                    [user_check] unsigned char *address);
    };

    untrusted {
        /* logging */
        void ocall_log_FATAL    ([in,string] const char* str);
        void ocall_log_ERROR    ([in,string] const char* str);
        void ocall_log_WARNING  ([in,string] const char* str);
        void ocall_log_INFO     ([in,string] const char* str);
        void ocall_log_1        ([in,string] const char* str);
        void ocall_log_2        ([in,string] const char* str);
        void ocall_log_3        ([in,string] const char* str);
        void ocall_log_4        ([in,string] const char* str);
        void ocall_log_5        ([in,string] const char* str);
        void ocall_log_6        ([in,string] const char* str);
        void ocall_log_7        ([in,string] const char* str);
        void ocall_log_8        ([in,string] const char* str);
        void ocall_log_9        ([in,string] const char* str);

        long long rdtsc();
        void ocall_sleep(int milisec);
        time_t ocall_time();
    };
};
